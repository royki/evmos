---
# Remove Docker

- name: Remove Docker, docker-engine, docker.io
  apt:
    name: '{{ item }}'
    state: absent
  with_items:
    - docker
    - docker-engine
    - docker.io
    - docker-compose
    - containerd
    - runc
  tags:
    - never

# Install packages

# Platform
- name: Update platform
  apt:
    upgrade: 'yes'
    update_cache: 'yes'
    cache_valid_time: '{{ apt_cache_valid_time|default(86400)|int }}'
  when:
    ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

# Docker
- name: Set Docker packages installation
  apt:
    name: ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg-agent', 'gnupg2', 'software-properties-common']
    update_cache: 'yes'
    state: present
    cache_valid_time: '{{ apt_cache_valid_time|default(3600)|int }}'
  when: not ansible_check_mode

- name: Install python
  apt:
    name: ['python3', 'python3-pip', 'python3-setuptools', 'python3-dev', 'build-essential', 'python3-apt', 'awscli']
    state: present
  when: not ansible_check_mode

- name: Create Docker group
  group:
    name: '{{ docker_pkg_name }}'
    state: present
  when: not ansible_check_mode

- name: Add ssh user to docker group
  user:
    name: '{{ ansible_ssh_user }}'
    groups: ['{{ docker_pkg_name }}']
    append: true
  when: not ansible_check_mode

- name: Add Docker apt key
  apt_key:
    url: '{{ docker_gpg_key_url }}'
    id: '{{ docker_apt_id }}'
    state: present
  when: not ansible_check_mode

- name: Add Docker repository
  apt_repository:
    repo: '{{ docker_apt_repository }}'
    state: present
    update_cache: true

- name: Install Docker
  package:
    name: '{{ docker_pkg_ce }}'
    state: present
  when: not ansible_check_mode

# Docker Compose
- name: Install Docker Compose
  get_url:
    url: '{{ docker_compose_url }}'
    dest: '{{ docker_compose_path }}'
    mode: 0755
